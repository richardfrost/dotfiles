#!/usr/bin/env ruby -w

require 'optparse'

##
# Todo
#
# Support explicit database hostname instead of just master
# mdtail - Maybe open up sshmux to all nodes and execute mdtail?
# More support for named tmux title

HELP = <<-HEREDOC
Supported Commands

Note: All commands default to node 1 unless a number is specified

----
SSH:
----
SSH to sz-env-node1
q sz-env-node

----
App:
----
Tail log on sz-env-node2
q [app] log sz-env-node2

Start rails console on sz-env-node1
q [app] rails sz-env-node[1]

SSH to sz-env-node3
q [app] ssh sz-env-node3

SSH to sz-env-node1 and attach to TMUX session
q [app] tmux sz-env-node

SSH to sz-env-node1 and attach to TMUX session, if new session start rails console
q [app] tmux_rails sz-env-node

---------
Postgres:
---------
Note: All commands will default to the slave (20x) node. to get 10x specify "master"

PSQL to site-env-postgres10x and connect to the specified database
q pg [psql] site-env [database] master

PSQL to site-env-postgres202 and output list of databases
q pg list site-env 2

Tail PG log on site-env-postgres201
q pg log site-env

SSH to site-env-postgres102 (specified database on x02), attach TMUX and open PSQL
q pg tmux site-env database master

-------
SSHMUX:
-------
Open SSHMUX to nodes 1-6 of sz-env-app
q mux sz-env-app{1..6}

Open SSHMUX to all nodes of sz-env-app
q mux sz-env-app

Open SSHMUX to all odd-numbered nodes of sz-env-app
q mux sz-env-app odd

--------
Vertica:
--------
SSH to sz-env-vertica1 and open VSQL (auth using your user and LDAP)
q vertica [vsql] sz-env [1]

SSH to sz-env-vertica2 and open VSQL as dbadmin
q vertica dbadmin 2

SSH to sz-env-vertica2, attach TMUX and start VSQL (auth using your user and LDAP)
q vertica tmux sz-env 2

SSH to sz-env-vertica2, attach TMUX and start VSQL as dbadmin
q vertica tmux_dbadmin sz-env 3
HEREDOC

class Command
  def environment
    case @env
    when 'corp'
      'corporate'
    when 'int'
      'integration'
    when 'prod'
      'production'
    when 'qa'
      'qa'
    when 'sand'
      'sandbox'
    end
  end

  def hostname
    "#{@site}-#{@env}-#{@app}#{@node_number}"
  end

  def log
    "#{ssh} -t 'mdtail || $SHELL -l'"
  end

  def rails
    "#{ssh} -t 'source /etc/profile && cd /srv/#{@app}/current && mdenv bundle exec rails console || $SHELL -l'"
  end

  def run
    puts "#{self.public_send(@command)}\n\n"
    system(self.public_send(@command))
  end

  def ssh
    "ssh -q #{hostname}"
  end

  def tmux
    title = @command.nil? ? "main" : @command
    "#{ssh} -t 'tmux new-session -A -s #{title}'"
  end

  def tmux_rails
    "#{ssh} -t 'tmux new-session -A -s main \"source /etc/profile && cd /srv/#{@app}/current && mdenv bundle exec rails console; bash -l\" || $SHELL -l'"
  end
end

class App < Command
  def initialize(args)
    options = App.parse_quick(args)
    if options
      @command = options.fetch('command', 'ssh')
      @site = options.fetch('site')
      @env = options.fetch('env')
      @app = options.fetch('app')
      @node_number = options.fetch('node_number', 1)
      run
    end
  end

  def self.parse_quick(args)
    options = {}
    args.each do |arg|
      case arg
      when /^(log|rails|ssh|tmux|tmux_rails)$/i
        options['command'] = arg
      when /^\w{2,}-\w{2,4}-\w+$/
        site_env = arg.split('-')
        options['site'] = site_env[0]
        options['env'] = site_env[1]
        options['app'] = site_env[2].match(/^[a-zA-Z]+/).to_s
        if !!(site_env[2].match(/\d+$/))
          options['node_number'] = site_env[2].match(/\d+$/)
        end
      end
    end

    options if options.has_key?('site') && options.has_key?('env') && options.has_key?('app')
  end
end

class Postgres < Command
  def initialize(args)
    options = Postgres.parse_quick(args)
    if options
      @command = options.fetch('command', 'psql')
      @site = options.fetch('site')
      @env = options.fetch('env')
      @database = options.fetch('database', nil)
      @master = options.fetch('master', false)
      @node_number = options.fetch('node_number', nil)
      run
    end
  end

  def self.parse_quick(args)
    options = {}
    args.each do |arg|
      case arg
      when /^(list|log|psql|tmux)$/i
        options['command'] = arg
      when /^master$/i
        options['master'] = true
      when /^\w{2,}-\w{2,4}$/
        site_env = arg.split('-')
        options['site'] = site_env[0]
        options['env'] = site_env[1]
      when /^\w{3,}$/
        options['database'] = arg
      when /^\d$/
        options['node_number'] = arg
      end
    end

    options if options.has_key?('site') && options.has_key?('env')
  end

  # VARS: Customize DB mapping
  def cluster_number
    case @env
    when 'prod'
      if @node_number
        @node_number
      else
        case @database
        when 'amigo', 'grafana', 'macklin', 'persona', 'vault'
          1
        when 'ballista'
          2
        when 'abacus'
          3
        when 'batcave', 'bullseye', 'dispatch', 'newman', 'sherlock', 'synchronicity' #, 'vault'
          6
        end
      end
    when 'corp', 'int', 'qa', 'sand'
      1
    end
  end

  def full_database
    "#{@database}_#{environment}" if @database
  end

  def hostname
    case @env
    when 'prod'
      if cluster_number
        "#{@site}-#{@env}-postgres#{series_number}#{cluster_number}"
      else
        puts "Error - Couldn't find database cluster from: #{@database}"
        exit
      end
    when 'corp', 'int', 'qa', 'sand'
      "#{@site}-#{@env}-postgres#{series_number}"
    end
  end

  def series_number
    case @env
    when 'corp', 'int', 'qa', 'sand'
      @master ? '101' : '201'
    when 'prod'
      @master ? '10' : '20'
    end
  end

  # VARS: Customize PG Versions per environment
  def version
    case @env
    when 'corp', 'qa', 'sand'
      '10'
    when 'int', 'prod'
      '10'
    end
  end

  ##
  # Command components
  #
  def pg_log_dir
    if version.to_f < 10
      "/var/lib/postgresql/#{version}/postgres#{cluster_number}_#{environment}/pg_log"
    else
      "/var/lib/postgresql/#{version}/postgres#{cluster_number}_#{environment}/log"
    end
  end

  def psql_component
    # path = "/var/run/postgresql"
    # Dir.chdir(path)
    # latest_version = Dir.glob("[1-9]*[0-9]").select { |f| File.directory?(f) && f[/^\d+\.?\d+$/] }.max_by(&:to_f)
    # "#{path}/#{latest_version}/postgres#{cluster}_#{environment}/"

    "psql -U postgres -h /var/run/postgresql/#{version}/postgres#{cluster_number}_#{environment}/"
  end

  def psql_database
    "-d #{full_database}" if @database
  end

  ##
  # Instance Commands
  #
  def list
    "#{ssh} -t '#{psql_component} --list'"
  end

  def log
    "#{ssh} -t 'sudo su -c \"tail -f #{pg_log_dir}/*\"'"
  end

  def psql
    "#{ssh} -t '#{psql_component} #{psql_database}'"
  end

  def tmux
    "#{ssh} -t 'tmux new-session -A -s psql \"#{psql_component} #{psql_database}; /bin/bash -l\" || $SHELL -l'"
  end
end

class Vertica < Command
  def initialize(args)
    options = Vertica.parse_quick(args)
    if options
      @command = options.fetch('command', 'vsql')
      @site = options.fetch('site')
      @env = options.fetch('env')
      @app = 'vertica'
      @database = options.fetch('database', 'ballista')
      @node_number = options.fetch('node_number', 1)
      run
    end
  end

  # Don't require database because there is only one
  def self.parse_quick(args)
    options = {}
    args.each do |arg|
      case arg
      when /^(dbadmin|tmux|tmux_dbadmin|vsql|)$/i
        options['command'] = arg
      when /^\w{2,}-\w{2,4}$/
        site_env = arg.split('-')
        options['site'] = site_env[0]
        options['env'] = site_env[1]
      when /^\w{3,}$/
        options['database'] = arg
      when /^\d$/
        options['node_number'] = arg
      end
    end

    options if options.has_key?('site') && options.has_key?('env')
  end

  ##
  # Command components
  #
  def vertica_database
    "#{@database}_#{environment}"
  end

  def vsql_bin
    "/opt/vertica/bin/vsql"
  end

  ##
  # Instance Commands
  #
  def dbadmin
    # Use sudo to switch to dbadmin
    # "#{ssh} -t 'sudo -i -u dbadmin #{vsql_bin} #{vertica_database}'"

    # Run vsql with dbadmin user
    "#{ssh} -t '#{vsql_bin} -U dbadmin -d #{vertica_database}'"
  end

  def vsql
    # Deprecated: Connect locally with my user account to host by IP
    # server_ip = `host #{hostname} | awk '/has address/ { print $4 }'`.strip
    "#{ssh} -t '#{vsql_bin} -h $(hostname -i)'"
  end

  def tmux
    "#{ssh} -t 'tmux new-session -A -s main \"#{vsql_bin} -h $(hostname -i) || $SHELL -l\" || $SHELL -l'"
  end

  def tmux_dbadmin
    "#{ssh} -t 'tmux new-session -A -s main \"#{vsql_bin} -U dbadmin -d #{vertica_database} || $SHELL -l\" || $SHELL -l'"
  end
end

class QuickConnect
  def initialize(args)
    available_commands = ["app", "help", "mux", "pg", "vertica"]
    args.unshift('app') unless available_commands.include? args.first # Default to app
    @command = args.first
    @args = args[1..-1]
  end

  def run
    case @command
    when "app"
      App.new(@args)
    when "help"
      puts HELP
    when "mux"
      command = "#{File.expand_path(File.dirname(__FILE__))}/sshmux #{@args.join(' ')}"
      puts command
      exec(command)
    when "pg"
      Postgres.new(@args)
    when "vertica"
      Vertica.new(@args)
    end
  end
end

QuickConnect.new(ARGV).run
