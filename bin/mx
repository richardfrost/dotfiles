#!/usr/bin/env ruby
require "optparse"
require "thor"

module Helper
  def self.parse_app_quick(args)
    options = {}
    args.each do |arg|
      case arg
      when /^\w{2,}-\w{2,4}-\w+$/
        site_env = arg.split('-')
        options['site'] = site_env[0]
        options['env'] = site_env[1]
        options['app'] = site_env[2].match(/^[a-zA-Z]+/).to_s
        if !!(site_env[2].match(/\d+$/))
          options['node_number'] = site_env[2].match(/\d+$/)
        end
      end
    end

    options if options.has_key?('site') && options.has_key?('env') && options.has_key?('app')
  end

  def parse_pg_quick(args)
    options = {}
    args.each do |arg|
      case arg
      when /^psql$/
        options['psql'] = true
      when /^master$/i
        options['master'] = true
      when /^\w{2,}-\w{2,4}$/
        site_env = arg.split('-')
        options['site'] = site_env[0]
        options['env'] = site_env[1]
      when /^\w{3,}$/
        options['database'] = arg
      when /^\d$/
        options['host_number'] = arg
      end
    end

    if options.has_key?('site') && options.has_key?('env')
      Database.new(options)
    end
  end
end

class App < Thor
  class Node
    def initialize(params)
      @site = params.fetch('site')
      @env = params.fetch('env')
      @app = params.fetch('app')
      @node_number = params.fetch('node_number', 1)
    end

    def hostname
      "#{@site}-#{@env}-#{@app}#{@node_number}"
    end

    def logs_command
      "#{ssh} -t 'mdtail || $SHELL -l'"
    end

    def ssh
      "ssh -q #{hostname}"
    end

    def rails_command
      "#{ssh} -t 'source /etc/profile && cd /srv/#{@app}/current && mdenv bundle exec rails console || $SHELL -l'"
    end

    def rails_command_tmux
      "#{ssh} -t 'tmux new-session -A -s main \"source /etc/profile && cd /srv/#{@app}/current && mdenv bundle exec rails console || bash -l\" || $SHELL -l'"
    end

    def tmux_command
      "#{ssh} -t 'tmux new-session -A -s main"
    end
  end

  desc "logs", "View logs for app"
  def logs(*args)
    options = Helper.parse_app_quick(args)
    node = Node.new(options)
    if node
      system node.logs_command
    end
  end

  desc "rails", "Rails console of app"
  def rails(*args)
    options = Helper.parse_app_quick(args)
    node = Node.new(options)
    if node
      system node.rails_command
    end
  end

  desc "ssh", "SSH to app"
  def ssh(*args)
    options = Helper.parse_app_quick(args)
    node = Node.new(options)
    if node
      system node.ssh
    end
  end

  desc "tmux", "SSH to app and open main tmux"
  def tmux(*args)
    options = Helper.parse_app_quick(args)
    node = Node.new(options)
    if node
      system "#{node.tmux_command}'"
    end
  end
end

class PG < Thor
  class Database
    def initialize(params)
      @site = params.fetch('site')
      @env = params.fetch('env')
      @database = params.fetch('database', nil)
      @master = params.fetch('master', false)
      @host_number = params.fetch('host_number', nil)
    end

    def cluster_number
      case @env
      when 'prod'
        if @host_number
          @host_number
        else
          case @database
          when 'amigo', 'grafana', 'macklin', 'persona', 'vault'
            1
          when 'ballista'
            2
          when 'abacus'
            3
          when 'batcave', 'bullseye', 'dispatch', 'newman', 'sherlock', 'synchronicity', 'vault'
            6
          end
        end
      when 'corp', 'int', 'qa', 'sand'
        1
      end
    end

    def environment
      case @env
      when 'corp'
        'corporate'
      when 'int'
        'integration'
      when 'prod'
        'production'
      when 'qa'
        'qa'
      when 'sand'
        'sandbox'
      end
    end

    def full_database
      "#{@database}_#{environment}" if @database
    end

    def host
      case @env
      when 'prod'
        if cluster_number
          "#{@site}-#{@env}-postgres#{series_number}#{cluster_number}"
        else
          puts "Error - Couldn't find database cluster from: #{@database}"
          exit
        end
      when 'corp', 'int', 'qa', 'sand'
        "#{@site}-#{@env}-postgres#{series_number}"
      end
    end

    def list
      "--list"
    end

    def psql
      "psql -U postgres -h /var/run/postgresql/9.5/postgres#{cluster_number}_#{environment}/"
    end

    def psql_command
      "#{ssh_command} -t 'echo \"#{host}\n#{psql}\"; #{psql}'"
    end

    def psql_database
      "-d #{full_database}" if @database
    end

    def psql_database_command
      "#{ssh_command} -t 'echo \"#{host}\n#{psql} #{psql_database}\"; #{psql} #{psql_database}'"
    end

    def psql_list_command
      "#{ssh_command} -t 'echo \"#{host}\"; #{psql} #{list}'"
    end

    def series_number
      case @env
      when 'corp', 'int', 'sand'
        @master ? '101' : '201'
      when 'prod'
        @master ? '10' : '20'
      when 'qa'
        @master ? '1' : '2'
      end
    end

    # Supress server banner: -q
    # To remove Ubuntu banner: touch ~/.hughlogin
    def ssh_command
      "ssh -q #{host}"
    end

    def ssh_command_echo_psql
      "#{ssh_command} -t 'echo #{psql} #{psql_database}; $SHELL -l'"
    end

    def tmux
      "tmux new-session -A -s psql"
    end

    def tmux_command
      if @database
        "#{ssh_command} -t '#{tmux} \"echo #{psql} #{psql_database}; #{psql} #{psql_database}; $SHELL -l\" || $SHELL -l'"
      else
        "#{ssh_command} -t '#{tmux} \"echo #{psql}; #{psql} #{list}; #{psql}; $SHELL -l\" || $SHELL -l'"
      end
    end

    def self.parse_quick(args)
      options = {}
      args.each do |arg|
        case arg
        when /^psql$/
          options['psql'] = true
        when /^master$/i
          options['master'] = true
        when /^\w{2,}-\w{2,4}$/
          site_env = arg.split('-')
          options['site'] = site_env[0]
          options['env'] = site_env[1]
        when /^\w{3,}$/
          options['database'] = arg
        when /^\d$/
          options['host_number'] = arg
        end
      end

      if options.has_key?('site') && options.has_key?('env')
        Database.new(options)
      end
    end
  end

  # Override method_missing to call default task with arguments
  def method_missing(method, *args)
    args = ["psql", method.to_s] + args
    PGConnect.start(args)
  end

  # Examples:
  #   mxpg list sd-corp
  #   mxpg list sd-prod ballista 6
  desc "list", "Connect to postgres server and list databases"
  def list(*args)
    db = Database.parse_quick(args)
    if db
      system db.psql_list_command
    else
      say "Error, couldn't parse: #{args}"
    end
  end

  # Examples:
  #   mxpg se-prod ballista
  #   mxpg sd-prod ballista master
  #   mxpg psql sd-prod ballista master
  desc "psql", "Default task: Connect to postgres server and run psql client"
  def psql(*args)
    db = Database.parse_quick(args)
    if db
      system db.psql_database_command
    else
      say "Error, couldn't parse: #{args}"
    end
  end

  # Examples:
  #   mxpg ssh sd-prod ballista
  desc "ssh", "SSH into postgres server"
  def ssh(*args)
    db = Database.parse_quick(args)
    if db
      system db.ssh_command_echo_psql
    else
      say "Error, couldn't parse: #{args}"
    end
  end

  # Examples:
  #   mxpg tmux sd-prod ballista
  desc "tmux", "SSH into postgres and start tmux"
  def tmux(*args)
    db = Database.parse_quick(args)
    if db
      system db.tmux_command
    else
      say "Error, couldn't parse: #{args}"
    end
  end
end

class CLI < Thor
  desc "pg", "Connect to postgres servers"
  subcommand "pg", PG

  desc "app", "Connect to a server and start tmux"
  subcommand "app", App
end

CLI.start(ARGV)
