##
# Git
#
function current_branch { git symbolic-ref --short HEAD; }

##
# System
#
# Sets a variable `SYSTEM_TYPE` that stores the type of system the shell is running on
# Note: For better performance, put the most common/used system type first
function set_system_type {
  if [ -z ${SYSTEM_TYPE} ]; then
    if test -f "/proc/version" && grep -qi microsoft "/proc/version"; then # WSL
      export SYSTEM_TYPE=wsl
      # microsoft-standard-WSL2
    # elif [[ "$(uname -s)" == "Darwin" ]]; then # macOS
    elif [[ "$OSTYPE" == "darwin"* ]]; then # macOS
      export SYSTEM_TYPE=mac
    elif command -v explorer > /dev/null 2>&1; then # Windows Bash
      export SYSTEM_TYPE=winbash
    fi
  fi
}

##
# Other functions
#
# Rename a git branch name
function branch-rename {
  new_branch=$1
  old_branch=$(current_branch)
  printf '%s ' "Rename branch: $old_branch to $new_branch. [y/n]? "
  read -r REPLY
  if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
    # Rename branch
    git branch -m "$new_branch"

    printf '%s ' 'Update remote branch [y/n]? '
    read -r REPLY
    if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
      # Delete the old-name remote branch and push the new-name local branch.
      git push origin :"$old_branch" "$new_branch"

      # Reset the upstream branch for the new-name local branch.
      git push origin -u "$new_branch"
    else
      exit 0
    fi
  else
    exit 1
  fi
}

# List all local branches and their last revision date in order
function branch-revisions {
  for k in $(git branch | sed s/^..//); \
    do echo -e "$(git log -1 --pretty=format:'%Cgreen%ci %Cblue%cr%Creset' "$k" --)" \
    \\t"$k";done | sort
}

# https://stackoverflow.com/questions/3334475/git-how-to-update-checkout-a-single-file-from-remote-origin-master
function checkout-file-from-master {
  git checkout origin/master -- "$1"
}

# Switch branch to master branch, pull, and merge in current branch
function merge-master {
  branch=$(current_branch)
  git checkout master && git pull && git checkout "$branch" && git merge master
}

# Generate Password
# alias pwgen="date | md5"
function pwgen { if [[ $1 ]]; then length=$1; else length=32; fi; date +%s | sha256sum | base64 | head -c $length; echo; }

# Run a simple python http server for a folder
function pyhttp { python -m SimpleHTTPServer "$1"; }

function ssh_fingerprints {
  find "$HOME/.ssh" -name "*.pub" -print0 \
    | xargs -0 -I file sh -c \
    'echo --- file ---; ssh-keygen -lf file; ssh-keygen -E md5 -lf file; echo'
}

function sshtmux {
  ssh "$@" -q -t 'tmux new-session -A -s main || $SHELL -l'
}

# Init NVM
function invm {
  if [[ -d "$HOME/.nvm" ]]; then
    export NVM_DIR="$HOME/.nvm"
    . "$NVM_DIR/nvm.sh"
    . "$NVM_DIR/bash_completion"
  else
    echo "$HOME/.nvm not present."
  fi
}

# Verbose Copy - Show progress and rate on local copy
function vcp {
  rsync -ah --progress "$@"
}
